/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core, connectionPluginCore } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Mutation: {};
  Project: { // root type
    color?: string | null; // String
    completedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    expires?: NexusGenScalars['DateTime'] | null; // DateTime
    id?: string | null; // String
    name?: string | null; // String
    state?: string | null; // String
  }
  Query: {};
  Task: { // root type
    completedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    expires?: NexusGenScalars['DateTime'] | null; // DateTime
    id?: string | null; // String
    isPersonal?: boolean | null; // Boolean
    name?: string | null; // String
    state?: string | null; // String
  }
  User: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    email?: string | null; // String
    id?: string | null; // String
    image?: string | null; // String
    name?: string | null; // String
    role?: string | null; // String
  }
  User_project: { // root type
    id?: string | null; // String
    isOwner?: boolean | null; // Boolean
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    assignUsers: NexusGenRootTypes['User_project'] | null; // User_project
    createProject: NexusGenRootTypes['Project'] | null; // Project
    createTask: NexusGenRootTypes['Task'] | null; // Task
    deleteTask: NexusGenRootTypes['Task'] | null; // Task
    deleteUserProject: NexusGenRootTypes['User_project'] | null; // User_project
    updateRole: NexusGenRootTypes['User'] | null; // User
    updateState: NexusGenRootTypes['Task'] | null; // Task
    updateStateProject: NexusGenRootTypes['Project'] | null; // Project
  }
  Project: { // field return type
    color: string | null; // String
    completedAt: NexusGenScalars['DateTime'] | null; // DateTime
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    expires: NexusGenScalars['DateTime'] | null; // DateTime
    id: string | null; // String
    name: string | null; // String
    state: string | null; // String
  }
  Query: { // field return type
    all_projects_of_a_user: Array<NexusGenRootTypes['User_project'] | null> | null; // [User_project]
    all_users_of_a_project: Array<NexusGenRootTypes['User_project'] | null> | null; // [User_project]
    project: NexusGenRootTypes['Project'] | null; // Project
    task: NexusGenRootTypes['Task'] | null; // Task
    task_of_project: Array<NexusGenRootTypes['Task'] | null> | null; // [Task]
    tasks: Array<NexusGenRootTypes['Task'] | null> | null; // [Task]
    tasks_completed: Array<NexusGenRootTypes['Task'] | null> | null; // [Task]
    tasks_not_completed: Array<NexusGenRootTypes['Task'] | null> | null; // [Task]
    user: NexusGenRootTypes['User'] | null; // User
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  Task: { // field return type
    completedAt: NexusGenScalars['DateTime'] | null; // DateTime
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    expires: NexusGenScalars['DateTime'] | null; // DateTime
    id: string | null; // String
    isPersonal: boolean | null; // Boolean
    name: string | null; // String
    project: NexusGenRootTypes['Project'] | null; // Project
    responsible: NexusGenRootTypes['User'] | null; // User
    state: string | null; // String
  }
  User: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    email: string | null; // String
    id: string | null; // String
    image: string | null; // String
    name: string | null; // String
    role: string | null; // String
  }
  User_project: { // field return type
    id: string | null; // String
    isOwner: boolean | null; // Boolean
    project: NexusGenRootTypes['Project'] | null; // Project
    user: NexusGenRootTypes['User'] | null; // User
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    assignUsers: 'User_project'
    createProject: 'Project'
    createTask: 'Task'
    deleteTask: 'Task'
    deleteUserProject: 'User_project'
    updateRole: 'User'
    updateState: 'Task'
    updateStateProject: 'Project'
  }
  Project: { // field return type name
    color: 'String'
    completedAt: 'DateTime'
    createdAt: 'DateTime'
    description: 'String'
    expires: 'DateTime'
    id: 'String'
    name: 'String'
    state: 'String'
  }
  Query: { // field return type name
    all_projects_of_a_user: 'User_project'
    all_users_of_a_project: 'User_project'
    project: 'Project'
    task: 'Task'
    task_of_project: 'Task'
    tasks: 'Task'
    tasks_completed: 'Task'
    tasks_not_completed: 'Task'
    user: 'User'
    users: 'User'
  }
  Task: { // field return type name
    completedAt: 'DateTime'
    createdAt: 'DateTime'
    description: 'String'
    expires: 'DateTime'
    id: 'String'
    isPersonal: 'Boolean'
    name: 'String'
    project: 'Project'
    responsible: 'User'
    state: 'String'
  }
  User: { // field return type name
    createdAt: 'DateTime'
    email: 'String'
    id: 'String'
    image: 'String'
    name: 'String'
    role: 'String'
  }
  User_project: { // field return type name
    id: 'String'
    isOwner: 'Boolean'
    project: 'Project'
    user: 'User'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    assignUsers: { // args
      email: string; // String!
      projectId: string; // String!
    }
    createProject: { // args
      color: string; // String!
      description: string; // String!
      expires: NexusGenScalars['DateTime']; // DateTime!
      name: string; // String!
      userId: string; // String!
    }
    createTask: { // args
      description: string; // String!
      email: string; // String!
      expires: NexusGenScalars['DateTime']; // DateTime!
      isPersonal: boolean; // Boolean!
      name: string; // String!
      projectId: string; // String!
    }
    deleteTask: { // args
      taskId: string; // String!
    }
    deleteUserProject: { // args
      userProjectId: string; // String!
    }
    updateRole: { // args
      role: string; // String!
      userId: string; // String!
    }
    updateState: { // args
      state: string; // String!
      taskId: string; // String!
    }
    updateStateProject: { // args
      projectId: string; // String!
      state: string; // String!
    }
  }
  Query: {
    all_projects_of_a_user: { // args
      userId: string; // String!
    }
    all_users_of_a_project: { // args
      projectId: string; // String!
    }
    project: { // args
      projectId: string; // String!
    }
    task: { // args
      taskId: string; // String!
    }
    task_of_project: { // args
      projectId: string; // String!
    }
    tasks: { // args
      userId: string; // String!
    }
    tasks_completed: { // args
      userId: string; // String!
    }
    tasks_not_completed: { // args
      userId: string; // String!
    }
    user: { // args
      userId: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}