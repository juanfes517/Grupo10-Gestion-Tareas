// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now())
  role          String         @default("user")
  accounts      Account[]
  sessions      Session[]
  Task          Task[]
  user_project  user_project[]
}

model Project {
  id           String         @id @default(cuid())
  name         String
  description  String
  state        String         @default("Pendiente")
  createdAt    DateTime       @default(now())
  color        String
  expires      DateTime?
  completedAt  DateTime?
  user_project user_project[]
  Task         Task[]
}

model user_project {
  id        String  @id @default(cuid())
  userId    String
  projectId String
  isOwner   Boolean
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Task {
  id          String    @id @default(cuid())
  name        String
  description String
  state       String    @default("Pendiente")
  createdAt   DateTime  @default(now())
  isPersonal  Boolean
  expires     DateTime?
  completedAt DateTime?
  userId      String
  responsible User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId   String?
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
